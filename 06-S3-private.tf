locals {
  state_file_folders = "here is the folder path for state files"
}
locals {
  mime_types = jsondecode(file("${path.module}/${local.state_file_folders}/mime.json"))
  #if we don't define the content type for the state files,
  #AWS will automatically assign for us
  #the files can't be treated as state files for website
  #it's probably that .ipg files won't be displayed in webpage
}

# since cloudfront is used in front of S3
# s3 doesn't need to be public and its internet settings can be omitted
#============================================================
#1 to create s3 bucket to store state files
    #1.1 to create s3 bucket for the web (with CORS settings if any)
    #1.2 to create s3 bucket policy
    # the policy can be generated by Cloudfront AWS
    # or created manually using data source in terraform
    #1.3 to attach the policy to s3
#2 to upload state files from locally to s3 (index.html, ....)
#(step 3 & 4 as below can be omitted if there is only one bucket at this stage)
# if the project requires the main bucket to get info
# from other buckets, CORS settings are needed as well.
#3 to create s3 root bucket to translate the requests to one
    #3.1 to create s3 bucket 
    #3.2 to create s3 bucket policy
    #3.3 to attach the policy to s3 
#4 to upload another index.html to the root/main bucket if any
#============================================================
#1 below is to create s3 for storing files like index.html
resource "aws_s3_bucket" "example" {
  bucket = "${local.bucket_name_for_web}"
  force_destroy = true
  tags = {
    Name        = "${local.bucket_name_for_web}"
    Environment = "Dev"
  }
}
# below is add CORS if neccessary
  # the root bucket will 'translate' ALL web requests to one request ["https://www.${local.domain_name}"]
/*
resource "aws_s3_bucket_cors_configuration" "example" {
  bucket = aws_s3_bucket.example.id
  cors_rule {
    allowed_headers = ["*"]
    allowed_methods = ["PUT", "POST"]
    allowed_origins = ["https://www.${local.domain_name}"]
    expose_headers  = ["ETag"]
    max_age_seconds = 3000
  }

  cors_rule {
    allowed_methods = ["GET"]
    allowed_origins = ["*"]
  }
}  

# below is to host web on s3
# Cloudfront is applied in this project
# below is just for reference
resource "aws_s3_bucket_website_configuration" "example" {
  bucket = aws_s3_bucket.example.id

  index_document {
    suffix = "index.html"
  }
}
*/
# below is to enable versioning
resource "aws_s3_bucket_versioning" "example"{
    bucket = aws_s3_bucket.example.id
    versioning_configuration {
      status = "Enabled"
    }
}
# below is to create s3 bucket policy
# it can only be updated after cloudfront is created
data "aws_iam_policy_document" "example" {
  statement {
		actions = ["s3:GetObject"]

		resources = ["${aws_s3_bucket.example.arn}/*"]

		principals {
			type        = "Service"
			identifiers = ["cloudfront.amazonaws.com"]
		}
		condition {
			test     = "StringEquals"
			variable = "AWS:SourceArn"
			values   = [aws_cloudfront_distribution.example.arn]
		}
	}
  depends_on = [ 
    aws_cloudfront_distribution.example
   ]
}
#below is to attach the policy to s3
resource "aws_s3_bucket_policy" "example" {
  bucket = aws_s3_bucket.example.id
  policy = data.aws_iam_policy_document.example.json
  depends_on = [ 
    data.aws_iam_policy_document.example
  ]
}

#2 below is to upload state files to the newly built s3 bucket
resource "aws_s3_object" "upload_state_files" {
  for_each = fileset("./${local.state_file_folders}/", "**/*")
  bucket = aws_s3_bucket.example.id
  key = each.value
  source = "./${local.state_file_folders}/${each.value}"
  etag = filemd5("./${local.state_file_folders}/${each.value}")
  content_type = lookup(local.mime_types, regex("\\.[^.]+$",lower(each.value)), null)
  # text/html needs to be specified,
  # otherwise index.html will be treated as attachment
  # click on the file will not serve, but makes you download the file...
  # Note: convert all update files' extensions to be lower case!!!
  # those in upper case won't be properly retrieved in the json document
  depends_on = [ 
    aws_s3_bucket_policy.example
   ]
}
# below is to check for testing purpose:
output "content_type" {
  value=[for key in aws_s3_object.upload_state_files: key.content_type]
}

